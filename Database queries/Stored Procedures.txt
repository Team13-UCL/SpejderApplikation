CREATE PROCEDURE [spEditActivity] 
    @ActivityID INT,
    @ActivityDescription VARCHAR(255),
    @Preparation VARCHAR(500),
    @Notes VARCHAR(500),
    @Activity VARCHAR(500)
AS
BEGIN
    -- Start en transaktion
    BEGIN TRANSACTION

    -- Udfør opdateringen
    UPDATE Activity
    SET
        ActivityDescription = @ActivityDescription,
        Preparation = @Preparation,
        Notes = @Notes,
        Activity = @Activity
    WHERE ActivityID = @ActivityID;

    -- Tjek om der blev opdateret nogen rækker
    IF @@ROWCOUNT = 0
    BEGIN
        -- Rul tilbage, hvis ingen rækker blev opdateret
        ROLLBACK TRANSACTION;
        RETURN;
    END

    -- Hvis alt er ok, gennemfør transaktionen
    COMMIT TRANSACTION;
END


CREATE PROCEDURE [spEditBadge]
    @BadgeID INT,
    @Name VARCHAR(100),
	@Description VARCHAR(255),
	@Picture VARBINARY(MAX),
	@Link VARCHAR(500)
AS
BEGIN
    -- Start en transaktion
    BEGIN TRANSACTION

    -- Udfør opdateringen
    UPDATE Badge
    SET
        BadgeName = @Name,
		[Description] = @Description,
		Picture = @Picture,
		Link = @Link
    WHERE BadgeID = @BadgeID

    -- Tjek om der blev opdateret nogen rækker
    IF @@ROWCOUNT = 0
    BEGIN
        -- Rul tilbage, hvis ingen rækker blev opdateret
        ROLLBACK TRANSACTION;
        RETURN;
    END

    -- Hvis alt er ok, gennemfør transaktionen
    COMMIT TRANSACTION;
END


CREATE PROCEDURE [spEditMeeting]
    @MeetingID INT,
    @Date DATE,
	@Start TIME,
	@Stop TIME
AS
BEGIN
    -- Start en transaktion
    BEGIN TRANSACTION

    -- Udfør opdateringen
    UPDATE Meeting
    SET
        [Date] = @Date,
		[Start] = @Start,
		[Stop] = @Stop
    WHERE MeetingID = @MeetingID

    -- Tjek om der blev opdateret nogen rækker
    IF @@ROWCOUNT = 0
    BEGIN
        -- Rul tilbage, hvis ingen rækker blev opdateret
        ROLLBACK TRANSACTION;
        RETURN;
    END

    -- Hvis alt er ok, gennemfør transaktionen
    COMMIT TRANSACTION;
END


CREATE PROCEDURE [dbo].[spGetAllScoutmeetings]
AS
BEGIN
    BEGIN TRY
        -- Hent alle møder og deres tilknyttede oplysninger
        SELECT DISTINCT 
            Activity.ActivityID,
            Activity.Activity,
            Activity.Notes,
            Unit.UnitID,
            Unit.UnitName,
            Meeting.MeetingID,
            Meeting.Date,
            Meeting.Start,
            Meeting.Stop,
            -- Brug LEFT JOIN for ActivityBadge for at tillade aktiviteter uden mærker
            COALESCE(Badge.Picture, CAST(0x AS VARBINARY(MAX))) AS Picture, -- Hvis ingen badge, returneres tom VARBINARY
            Badge.BadgeID
        FROM Activity
        INNER JOIN ActivityUnit
            ON Activity.ActivityID = ActivityUnit.ActivityID
        INNER JOIN Unit
            ON ActivityUnit.UnitID = Unit.UnitID
        INNER JOIN ActivityMeeting
            ON Activity.ActivityID = ActivityMeeting.ActivityID
        INNER JOIN Meeting
            ON ActivityMeeting.MeetingID = Meeting.MeetingID
        LEFT JOIN ActivityBadge
            ON Activity.ActivityID = ActivityBadge.ActivityID
        LEFT JOIN Badge
            ON ActivityBadge.BadgeID = Badge.BadgeID
    END TRY
    BEGIN CATCH
        -- Fejlhåndtering: Hvis der opstår en fejl, returner en besked
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END


CREATE PROCEDURE [spGetScoutmeetingByID] @ActivityID INT
AS
BEGIN
    BEGIN TRY
        -- Hent alle møder og deres tilknyttede oplysninger
        SELECT DISTINCT 
            Activity.ActivityID,
            Activity.ActivityDescription,
            Activity.Notes,
            Unit.UnitID,
            Unit.UnitName,
            Meeting.MeetingID,
            Meeting.Date,
            Meeting.Start,
            Meeting.Stop,
            -- Brug LEFT JOIN for ActivityBadge for at tillade aktiviteter uden mærker
            COALESCE(Badge.Picture, CAST(0x AS VARBINARY(MAX))) AS BadgePicture, -- Hvis ingen badge, returneres tom VARBINARY
            Badge.BadgeID
        FROM Activity
        INNER JOIN ActivityUnit
            ON Activity.ActivityID = ActivityUnit.ActivityID
        INNER JOIN Unit
            ON ActivityUnit.UnitID = Unit.UnitID
        INNER JOIN ActivityMeeting
            ON Activity.ActivityID = ActivityMeeting.ActivityID
        INNER JOIN Meeting
            ON ActivityMeeting.MeetingID = Meeting.MeetingID
        LEFT JOIN ActivityBadge
            ON Activity.ActivityID = ActivityBadge.ActivityID
        LEFT JOIN Badge
            ON ActivityBadge.BadgeID = Badge.BadgeID
		WHERE Activity.ActivityID = @ActivityID
    END TRY
    BEGIN CATCH
        -- Fejlhåndtering: Hvis der opstår en fejl, returner en besked
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END


CREATE PROCEDURE [spSelectActivity] @ActivityID INT
AS
BEGIN
	SET NOCOUNT ON
	SELECT
		ActivityID,
		ActivityDescription,
		Preparation,
		Notes,
		Activity
	FROM Activity
	WHERE
		ActivityID = @ActivityID
END


CREATE PROCEDURE [spSelectBadge]
    @BadgeID INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        BadgeID,
        BadgeName,
        Description,
        Picture,
        Link
    FROM 
        Badge
    WHERE 
        BadgeID = @BadgeID;
END


CREATE PROCEDURE [spSelectMeeting]
    @MeetingID INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        MeetingID,
        Date,
        Start,
        Stop
        
    FROM 
        Meeting
	WHERE MeetingID = @MeetingID
END


CREATE PROCEDURE [spSelectUnit]
    @UnitID INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        UnitID,
        UnitName,
        Description,
        Link        
    FROM 
        Unit
    WHERE 
        UnitID = @UnitID;
END

CREATE PROCEDURE spDeleteScoutMeeting 
	@ActivityID INT, 
	@MeetingID INT,  
	@UnitID INT, 
	@BadgeID INT
AS
BEGIN
	BEGIN TRANSACTION
	BEGIN TRY
		ALTER TABLE ActivityUnit NOCHECK CONSTRAINT ALL;
		ALTER TABLE ActivityBadge NOCHECK CONSTRAINT ALL;
		ALTER TABLE ActivityMeeting NOCHECK CONSTRAINT ALL;

		IF @UnitID != 0
		BEGIN
			DELETE FROM ActivityUnit 
			WHERE 
				ActivityID = @ActivityID 
			AND 
				UnitID = @UnitID;
		END

		IF @MeetingID != 0
		BEGIN
			DELETE FROM ActivityMeeting
			WHERE
				ActivityID = @ActivityID
			AND
				MeetingID = @MeetingID;
			
			
			DELETE FROM Meeting
			WHERE
				MeetingID = @MeetingID;
		END

		IF @BadgeID != 0
		BEGIN
			DELETE FROM ActivityBadge
			WHERE
				ActivityID = @ActivityID
			AND
				BadgeID = @BadgeID;
		END

		DELETE FROM Activity
		WHERE
			ActivityID = @ActivityID;
		
		ALTER TABLE ActivityUnit CHECK CONSTRAINT ALL;
		ALTER TABLE ActivityBadge CHECK CONSTRAINT ALL;
		ALTER TABLE ActivityMeeting CHECK CONSTRAINT ALL;

		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END

CREATE PROCEDURE spAddActivity 
	@Activity VARCHAR(500), 
	@Description VARCHAR(255),
	@Preparation VARCHAR(500),
	@Notes VARCHAR(500),
	@ActivityID INT OUTPUT
AS
BEGIN
	BEGIN TRANSACTION
	BEGIN TRY
		INSERT INTO Activity (
			Activity,
			ActivityDescription,
			Preparation,
			Notes)
		VALUES (
			@Activity,
			@Description,
			@Preparation,
			@Notes);
		SET @ActivityID = SCOPE_IDENTITY();
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END

CREATE PROCEDURE spAddBadge 
    @ActivityID INT,
    @BadgeName VARCHAR(100),
    @Description VARCHAR(255),
    @Picture VARBINARY(MAX),
    @Link VARCHAR(500),
    @BadgeID INT,
    @NewBadgeID INT OUTPUT
AS
BEGIN
    BEGIN TRANSACTION;
    BEGIN TRY
        IF @BadgeID != 0
        BEGIN
            -- Tilknyt eksisterende badge til aktivitet
            INSERT INTO ActivityBadge (
                ActivityID,
                BadgeID
            )
            VALUES (
                @ActivityID, 
                @BadgeID
            );

            -- Returnér det eksisterende BadgeID som output
            SET @NewBadgeID = @BadgeID;
        END
        ELSE
        BEGIN
            -- Opret en ny badge
            INSERT INTO Badge (
                BadgeName,
                [Description],
                [Picture],
                Link
            )
            VALUES (
                @BadgeName,
                @Description,
                @Picture,
                @Link
            );

            -- Hent det nye BadgeID og sæt det til output-parameteren
            SET @NewBadgeID = SCOPE_IDENTITY();

            -- Tilknyt den nye badge til aktiviteten
            INSERT INTO ActivityBadge (
                ActivityID,
                BadgeID
            )
            VALUES (
                @ActivityID,
                @NewBadgeID
            );
        END;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        -- Rul transaktionen tilbage ved fejl
        ROLLBACK TRANSACTION;

        -- Genkast fejlen
        THROW;
    END CATCH;
END;